USE mibase_m3;


DROP TABLE IF EXISTS VENTA;
CREATE TABLE IF NOT EXISTS `venta` (
  `IdVenta`				INTEGER,
  `Fecha` 				DATE NOT NULL,
  `Fecha_Entrega` 		DATE NOT NULL,
  `IdCanal`				INTEGER, 
  `IdCliente`			INTEGER, 
  `IdSucursal`			INTEGER,
  `IdEmpleado`			INTEGER,
  `IdProducto`			INTEGER,
  `Precio`				VARCHAR(30),
  `Cantidad`			VARCHAR(30)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;

-- CARGA DE LOS DATOS
LOAD DATA INFILE 'venta.csv' 
INTO TABLE `venta` 
FIELDS TERMINATED BY ',' ENCLOSED BY '' ESCAPED BY '' 
LINES TERMINATED BY '\n' IGNORE 1 LINES;

-- CORRECCION DE DUPLICADO EN ID EMPLEADO
UPDATE `venta` SET `idempleado` = ((idsucursal * 1000000) + idempleado);


-- CORRECCION DE DATOS FALTANTES
UPDATE VENTA SET PRECIO = '0' WHERE PRECIO = '';
UPDATE VENTA SET CANTIDAD = '0' WHERE CANTIDAD = CHAR(13);
ALTER TABLE VENTA CHANGE Precio Precio DECIMAL(10,2) NOT NULL;
ALTER TABLE VENTA CHANGE Cantidad Cantidad INT(30) NOT NULL;
-- Llenar datos faltantes de Precio en venta, utilizando precio en producto
UPDATE venta v
        JOIN
    producto p ON (v.IdProducto = p.IdProducto) 
SET 
    v.Precio = p.Precio
WHERE
    v.Precio = 0;
    
-- AUX_VENTA
DROP TABLE IF EXISTS `aux_venta`;
CREATE TABLE IF NOT EXISTS `aux_venta` (                                                                               -- <------- TABLE AUX VENTA
  `IdVenta`				INTEGER,
  `Fecha` 				DATE NOT NULL,
  `Fecha_Entrega` 		DATE NOT NULL,
  `IdCanal`			INTEGER,
  `IdCliente`			INTEGER, 
  `IdSucursal`			INTEGER,
  `IdEmpleado`			INTEGER,
  `IdProducto`			INTEGER,
  `Precio`				FLOAT,
  `Cantidad`			INTEGER,
  `Motivo`				INTEGER
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_spanish_ci;


-- SELECT * FROM AUX_VENTA;
-- SELECT * FROM VENTA WHERE CANTIDAD = 0;

-- SELECT COUNT(IDVENTA) NUM_IDS FROM VENTA
-- GROUP BY IDVENTA
-- HAVING NUM_IDS > 1; 


-- INSERTAR CANTIDAD = 0 MOTIVO 1
INSERT INTO AUX_VENTA (IDVENTA, FECHA, FECHA_ENTREGA, IDCANAL, IDCLIENTE, IDSUCURSAL, IDEMPLEADO, IDPRODUCTO, PRECIO, CANTIDAD, MOTIVO)
SELECT V.IDVENTA, V.FECHA, V.FECHA_ENTREGA, V.IDCANAL, V.IDCLIENTE, V.IDSUCURSAL, V.IDEMPLEADO, V.IDPRODUCTO, V.PRECIO, CANTIDAD, 1
FROM VENTA V WHERE V.CANTIDAD = 0;

-- INSERT OUTLIERS CANTIDAD
INSERT INTO AUX_VENTA (IDVENTA, FECHA, FECHA_ENTREGA, IDCANAL, IDCLIENTE, IDSUCURSAL, IDEMPLEADO, IDPRODUCTO, PRECIO, CANTIDAD, MOTIVO)
SELECT V.IDVENTA, V.FECHA, V.FECHA_ENTREGA, V.IDCANAL, V.IDCLIENTE, V.IDSUCURSAL, V.IDEMPLEADO, V.IDPRODUCTO, V.PRECIO, V.CANTIDAD, 2
FROM VENTA V 
JOIN (SELECT IDPRODUCTO, AVG(CANTIDAD) AS PROMEDIO, STDDEV(CANTIDAD) AS DES FROM VENTA GROUP BY IDPRODUCTO) V2
ON (V.IDPRODUCTO = V2.IDPRODUCTO)
WHERE V.CANTIDAD > (V2.PROMEDIO + (3 * V2.DES)) OR V.CANTIDAD < 0;

-- INSERT OUTLIERS PRECIO
INSERT INTO AUX_VENTA (IDVENTA, FECHA, FECHA_ENTREGA, IDCANAL, IDCLIENTE, IDSUCURSAL, IDEMPLEADO, IDPRODUCTO, PRECIO, CANTIDAD, MOTIVO)
SELECT V.IDVENTA, V.FECHA, V.FECHA_ENTREGA, V.IDCANAL, V.IDCLIENTE, V.IDSUCURSAL, V.IDEMPLEADO, V.IDPRODUCTO, V.PRECIO, V.CANTIDAD, 3
FROM VENTA V 
JOIN(SELECT IDPRODUCTO, AVG(PRECIO) AS PROMEDIO, AVG (PRECIO) + 3 * STDDEV(PRECIO) AS MAXIMO FROM VENTA GROUP BY IDPRODUCTO) AS LS
ON V.IDPRODUCTO = LS.IDPRODUCTO
WHERE PRECIO > MAXIMO OR PRECIO <= 0;

UPDATE venta SET Cantidad = 1 WHERE Cantidad = 0 or Cantidad is null;

SELECT * FROM AUX_VENTA WHERE MOTIVO = 1;

-- SELECT * FROM VENTA;

